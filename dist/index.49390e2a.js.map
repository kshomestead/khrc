{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,A,G,E,E,W,C,E,a,C,C,GCEA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,GCVA,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,wJ,I,E,C,EEA5F,EAAiB,IAAA,IAAoB,2CAAA,YAAA,GAAA,EAA4C,QAAQ,G,I,E,C,ECAzF,EAAiB,IAAA,IAAoB,0CAAA,YAAA,GAAA,EAA2C,QAAQ,GFMxF,SAAS,gBAAgB,CAAC,mBAAoB,KAE5C,IAAM,EAAW,SAAS,gBAAgB,CAAC,YACrC,EAAa,SAAS,gBAAgB,CAAC,eACvC,EAAe,SAAS,gBAAgB,CAAC,kBAGzC,EAAgB,AAAC,IACrB,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,EAAA,CAAU,EAE/C,EAAS,OAAO,CAAC,AAAC,IAChB,EAAQ,SAAS,CAAC,MAAM,CAAC,SAC3B,GAGA,IAAI,KAAe,EAAa,CAAC,OAAO,CAAC,AAAC,IACxC,EAAO,SAAS,CAAC,MAAM,CAAC,SAC1B,GAGA,IAAM,EAAgB,SAAS,cAAc,CAAC,GAC1C,GACF,EAAc,SAAS,CAAC,GAAG,CAAC,UAC5B,EAAc,cAAc,CAAC,CAAE,SAAU,QAAS,GAClD,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,EAAA,CAAU,GAE5C,QAAQ,KAAK,CAAC,CAAC,iBAAiB,EAAE,EAAS,YAAY,CAAC,EAI1D,IAAI,KAAe,EAAa,CAAC,OAAO,CAAC,AAAC,IACpC,EAAO,YAAY,CAAC,iBAAmB,IACzC,EAAO,SAAS,CAAC,GAAG,CAAC,UACrB,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,EAAO,WAAW,CAAA,CAAE,EAEzD,EACF,EAGA,IAAI,KAAe,EAAa,CAAC,OAAO,CAAC,AAAC,IACxC,IAAM,EAAW,EAAO,YAAY,CAAC,eACjC,GACF,EAAO,gBAAgB,CAAC,QAAS,AAAC,IAChC,EAAE,cAAc,GAChB,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,EAAO,WAAW,CAAA,CAAE,EAC9D,EAAc,GAGV,GAAW,EAAQ,IAAI,GACzB,EAAQ,KAAK,GACb,QAAQ,GAAG,CAAC,iCAEhB,EAEJ,GAGA,IAAM,EAAa,SAAS,cAAc,CAAC,eACrC,EAAU,SAAS,cAAc,CAAC,WAEpC,CAAA,GAAc,EAEhB,EAAW,gBAAgB,CAAC,QAAS,AAAC,IACpC,QAAQ,GAAG,CAAC,wBACZ,EAAQ,IAAI,CAAG,CAAC,EAAQ,IAAI,CAC5B,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,EAAQ,IAAI,CAAG,OAAS,SAAS,CAAC,CAAC,CAChE,GAEA,QAAQ,KAAK,CAAC,iDAIhB,IAAM,EAAa,KACjB,IAAM,EAAY,SAAS,cAAc,CAAC,cACpC,EAAc,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,cAE5D,GACF,EAAU,GAAG,CAAG,EAAc,WAAA,EAAA,EAAA,GAAW,WAAA,EAAA,EAAA,GACzC,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAU,GAAG,CAAA,CAAE,GAE/C,QAAQ,KAAK,CAAC,gCAElB,EAGM,EAAoB,SAAS,cAAc,CAAC,gBAC9C,EACF,EAAkB,gBAAgB,CAAC,QAAS,KAC1C,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,cAC1C,IAAM,EAAc,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,aAChE,CAAA,EAAkB,aAAa,CAAC,8BAA8B,WAAW,CAAG,EAAc,aAAe,YAGzG,aAAa,OAAO,CAAC,QAAS,EAAc,OAAS,SACrD,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,EAAc,OAAS,QAAA,CAAS,EAGjE,GACF,GAEA,QAAQ,KAAK,CAAC,6CAKZ,AAAe,SADA,aAAa,OAAO,CAAC,UAEtC,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,cACnC,GACF,CAAA,EAAkB,aAAa,CAAC,8BAA8B,WAAW,CAAG,YAD9E,EAGA,QAAQ,GAAG,CAAC,gCAEZ,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,cACtC,GACF,CAAA,EAAkB,aAAa,CAAC,8BAA8B,WAAW,CAAG,WAD9E,EAGA,QAAQ,GAAG,CAAC,gCAId,IAGA,EAAc,OAChB","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-f2915bbb6b933a33.js","src/main.js","node_modules/@parcel/runtime-js/lib/runtime-1aa75a541722d688.js","node_modules/@parcel/runtime-js/lib/runtime-0ae62452650f3f7a.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $257c394b877691c5$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"auyDg\\\",\\\"index.49390e2a.js\\\",\\\"lhkgP\\\",\\\"logo-light.10f0f968.svg\\\",\\\"7uT5W\\\",\\\"logo-dark.73114e35.svg\\\"]\"));\n\n// main.js\n// Import the logo SVG files\nvar $3d5136aaf17eb29b$exports = {};\n$3d5136aaf17eb29b$exports = new URL(\"logo-light.10f0f968.svg\", import.meta.url).toString();\n\n\nvar $a83b67f944455bd2$exports = {};\n$a83b67f944455bd2$exports = new URL(\"logo-dark.73114e35.svg\", import.meta.url).toString();\n\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Query all sections and nav buttons\n    const sections = document.querySelectorAll('.section');\n    const navButtons = document.querySelectorAll('.nav-button');\n    const menuNavItems = document.querySelectorAll('.menu-nav-item');\n    // Function to switch visible sections\n    const switchSection = (targetId)=>{\n        console.log(`Switching to section: ${targetId}`);\n        // Hide all sections\n        sections.forEach((section)=>{\n            section.classList.remove('active');\n        });\n        // Remove active class from all buttons\n        [\n            ...navButtons,\n            ...menuNavItems\n        ].forEach((button)=>{\n            button.classList.remove('active');\n        });\n        // Show the target section\n        const targetSection = document.getElementById(targetId);\n        if (targetSection) {\n            targetSection.classList.add('active');\n            targetSection.scrollIntoView({\n                behavior: 'smooth'\n            });\n            console.log(`Activated section: ${targetId}`);\n        } else console.error(`Section with id \"${targetId}\" not found.`);\n        // Highlight the active button\n        [\n            ...navButtons,\n            ...menuNavItems\n        ].forEach((button)=>{\n            if (button.getAttribute('data-target') === targetId) {\n                button.classList.add('active');\n                console.log(`Activated button: ${button.textContent}`);\n            }\n        });\n    };\n    // Add event listeners to all nav buttons\n    [\n        ...navButtons,\n        ...menuNavItems\n    ].forEach((button)=>{\n        const targetId = button.getAttribute('data-target');\n        if (targetId) button.addEventListener('click', (e)=>{\n            e.preventDefault();\n            console.log(`Navigation button clicked: ${button.textContent}`);\n            switchSection(targetId);\n            // Close the menu if it's open (only for mobile menu)\n            if (navMenu && navMenu.open) {\n                navMenu.close();\n                console.log('Menu closed after navigation.');\n            }\n        });\n    });\n    // Menu Button and Menu\n    const menuButton = document.getElementById('menu-button');\n    const navMenu = document.getElementById('nav-menu');\n    if (menuButton && navMenu) // Open the menu when the menu button is clicked\n    menuButton.addEventListener('click', (e)=>{\n        console.log('Menu button clicked.');\n        navMenu.open = !navMenu.open; // Toggle the open property\n        console.log(`Menu is now ${navMenu.open ? 'open' : 'closed'}.`);\n    });\n    else console.error('Menu button or nav-menu not found in the DOM.');\n    // Function to update the logo based on the theme\n    const updateLogo = ()=>{\n        const logoImage = document.getElementById('logo-image');\n        const isDarkTheme = document.documentElement.classList.contains('dark-theme');\n        if (logoImage) {\n            logoImage.src = isDarkTheme ? (0, (/*@__PURE__*/$parcel$interopDefault($a83b67f944455bd2$exports))) : (0, (/*@__PURE__*/$parcel$interopDefault($3d5136aaf17eb29b$exports)));\n            console.log(`Logo updated to: ${logoImage.src}`);\n        } else console.error('Logo image element not found.');\n    };\n    // Theme toggling\n    const toggleThemeButton = document.getElementById('toggle-theme');\n    if (toggleThemeButton) toggleThemeButton.addEventListener('click', ()=>{\n        document.documentElement.classList.toggle('dark-theme');\n        const isDarkTheme = document.documentElement.classList.contains('dark-theme');\n        toggleThemeButton.querySelector('.material-symbols-outlined').textContent = isDarkTheme ? 'light_mode' : 'dark_mode';\n        // Save the user's theme preference\n        localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');\n        console.log(`Theme toggled to: ${isDarkTheme ? 'dark' : 'light'}`);\n        // Update the logo when the theme changes\n        updateLogo();\n    });\n    else console.error('Toggle theme button not found in the DOM.');\n    // Initialize theme and logo on page load\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n        document.documentElement.classList.add('dark-theme');\n        if (toggleThemeButton) toggleThemeButton.querySelector('.material-symbols-outlined').textContent = 'light_mode';\n        console.log('Initialized theme to dark.');\n    } else {\n        document.documentElement.classList.remove('dark-theme');\n        if (toggleThemeButton) toggleThemeButton.querySelector('.material-symbols-outlined').textContent = 'dark_mode';\n        console.log('Initialized theme to light.');\n    }\n    // Update the logo based on the current theme\n    updateLogo();\n    // Initialize the first section as active\n    switchSection('home');\n});\n\n\n//# sourceMappingURL=index.49390e2a.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"auyDg\\\",\\\"index.49390e2a.js\\\",\\\"lhkgP\\\",\\\"logo-light.10f0f968.svg\\\",\\\"7uT5W\\\",\\\"logo-dark.73114e35.svg\\\"]\"));","// main.js\n\n// Import the logo SVG files\nimport logoLight from './assets/logo-light.svg';\nimport logoDark from './assets/logo-dark.svg';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Query all sections and nav buttons\n  const sections = document.querySelectorAll('.section');\n  const navButtons = document.querySelectorAll('.nav-button');\n  const menuNavItems = document.querySelectorAll('.menu-nav-item');\n\n  // Function to switch visible sections\n  const switchSection = (targetId) => {\n    console.log(`Switching to section: ${targetId}`);\n    // Hide all sections\n    sections.forEach((section) => {\n      section.classList.remove('active');\n    });\n\n    // Remove active class from all buttons\n    [...navButtons, ...menuNavItems].forEach((button) => {\n      button.classList.remove('active');\n    });\n\n    // Show the target section\n    const targetSection = document.getElementById(targetId);\n    if (targetSection) {\n      targetSection.classList.add('active');\n      targetSection.scrollIntoView({ behavior: 'smooth' });\n      console.log(`Activated section: ${targetId}`);\n    } else {\n      console.error(`Section with id \"${targetId}\" not found.`);\n    }\n\n    // Highlight the active button\n    [...navButtons, ...menuNavItems].forEach((button) => {\n      if (button.getAttribute('data-target') === targetId) {\n        button.classList.add('active');\n        console.log(`Activated button: ${button.textContent}`);\n      }\n    });\n  };\n\n  // Add event listeners to all nav buttons\n  [...navButtons, ...menuNavItems].forEach((button) => {\n    const targetId = button.getAttribute('data-target');\n    if (targetId) {\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        console.log(`Navigation button clicked: ${button.textContent}`);\n        switchSection(targetId);\n\n        // Close the menu if it's open (only for mobile menu)\n        if (navMenu && navMenu.open) {\n          navMenu.close();\n          console.log('Menu closed after navigation.');\n        }\n      });\n    }\n  });\n\n  // Menu Button and Menu\n  const menuButton = document.getElementById('menu-button');\n  const navMenu = document.getElementById('nav-menu');\n\n  if (menuButton && navMenu) {\n    // Open the menu when the menu button is clicked\n    menuButton.addEventListener('click', (e) => {\n      console.log('Menu button clicked.');\n      navMenu.open = !navMenu.open; // Toggle the open property\n      console.log(`Menu is now ${navMenu.open ? 'open' : 'closed'}.`);\n    });\n  } else {\n    console.error('Menu button or nav-menu not found in the DOM.');\n  }\n\n  // Function to update the logo based on the theme\n  const updateLogo = () => {\n    const logoImage = document.getElementById('logo-image');\n    const isDarkTheme = document.documentElement.classList.contains('dark-theme');\n\n    if (logoImage) {\n      logoImage.src = isDarkTheme ? logoDark : logoLight;\n      console.log(`Logo updated to: ${logoImage.src}`);\n    } else {\n      console.error('Logo image element not found.');\n    }\n  };\n\n  // Theme toggling\n  const toggleThemeButton = document.getElementById('toggle-theme');\n  if (toggleThemeButton) {\n    toggleThemeButton.addEventListener('click', () => {\n      document.documentElement.classList.toggle('dark-theme');\n      const isDarkTheme = document.documentElement.classList.contains('dark-theme');\n      toggleThemeButton.querySelector('.material-symbols-outlined').textContent = isDarkTheme ? 'light_mode' : 'dark_mode';\n\n      // Save the user's theme preference\n      localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');\n      console.log(`Theme toggled to: ${isDarkTheme ? 'dark' : 'light'}`);\n\n      // Update the logo when the theme changes\n      updateLogo();\n    });\n  } else {\n    console.error('Toggle theme button not found in the DOM.');\n  }\n\n  // Initialize theme and logo on page load\n  const savedTheme = localStorage.getItem('theme');\n  if (savedTheme === 'dark') {\n    document.documentElement.classList.add('dark-theme');\n    if (toggleThemeButton) {\n      toggleThemeButton.querySelector('.material-symbols-outlined').textContent = 'light_mode';\n    }\n    console.log('Initialized theme to dark.');\n  } else {\n    document.documentElement.classList.remove('dark-theme');\n    if (toggleThemeButton) {\n      toggleThemeButton.querySelector('.material-symbols-outlined').textContent = 'dark_mode';\n    }\n    console.log('Initialized theme to light.');\n  }\n\n  // Update the logo based on the current theme\n  updateLogo();\n\n  // Initialize the first section as active\n  switchSection('home');\n});\n","module.exports = new __parcel__URL__(\"logo-light.10f0f968.svg\").toString();","module.exports = new __parcel__URL__(\"logo-dark.73114e35.svg\").toString();"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$3d5136aaf17eb29b$exports","$a83b67f944455bd2$exports","document","addEventListener","sections","querySelectorAll","navButtons","menuNavItems","switchSection","targetId","console","log","forEach","section","classList","remove","button","targetSection","getElementById","add","scrollIntoView","behavior","error","getAttribute","textContent","e","preventDefault","navMenu","open","close","menuButton","updateLogo","logoImage","isDarkTheme","documentElement","contains","src","toggleThemeButton","toggle","querySelector","localStorage","setItem","savedTheme","getItem"],"version":3,"file":"index.49390e2a.js.map"}